Option Explicit

Sub ImportiereRohdatenFinal()
    Dim wbDash As Workbook
    Dim wbData As Workbook
    Dim wsZuweisung As Worksheet
    Dim wsZiel As Worksheet
    Dim wsData As Worksheet
    Dim rngFound As Range
    
    Dim lLetzteZeileZuweisung As Long
    Dim lLetzteZeileData As Long
    
    Dim i As Long, j As Long
    
    Dim rawKey As String
    Dim rawVorgang As String
    Dim rawHeader As String
    Dim rawValue As Variant
    Dim strZielblattName As String
    Dim lZielzeile As Long
    
    Dim dictHeaders As Object
    Dim lastCol As Long
    
    Set wbDash = ThisWorkbook
    Set wsZuweisung = wbDash.Worksheets("Zuweisung")
    
    ' Rohdaten öffnen (Pfad anpassen!)
    Set wbData = Workbooks.Open("C:\Pfad\zu\Leaptree_Data.xlsx")
    Set wsData = wbData.Worksheets(1)
    
    lLetzteZeileZuweisung = wsZuweisung.Cells(wsZuweisung.Rows.Count, 2).End(xlUp).Row
    lLetzteZeileData = wsData.Cells(wsData.Rows.Count, 1).End(xlUp).Row
    
    ' Dictionary für Headers wird dynamisch je Zielblatt gefüllt
    Set dictHeaders = CreateObject("Scripting.Dictionary")
    
    For i = 2 To lLetzteZeileData
        rawKey = wsData.Cells(i, 1).Value      ' Rohdaten Spalte A
        rawVorgang = wsData.Cells(i, 2).Value  ' Rohdaten Spalte B
        rawHeader = wsData.Cells(i, 10).Value  ' Rohdaten Spalte J (Headername)
        
        ' Schlüssel in Zuweisung suchen
        Set rngFound = wsZuweisung.Columns(2).Find(What:=rawKey, LookAt:=xlWhole)
        If Not rngFound Is Nothing Then
            strZielblattName = rngFound.Offset(0, 1).Value ' Zielblatt aus Spalte C in Zuweisung
            
            On Error Resume Next
            Set wsZiel = wbDash.Worksheets(strZielblattName)
            On Error GoTo 0
            
            If wsZiel Is Nothing Then
                ' Zielblatt nicht gefunden
                GoTo NächsterDatensatz
            End If
            
            ' Headers des Zielblatts einlesen, falls noch nicht geschehen oder wenn sich das Blatt ändert
            ' Wir nehmen hier an, dass jedesmal wenn sich das Zielblatt ändert, wir neu einlesen.
            dictHeaders.RemoveAll
            ' Spalten C bis Q = 3 bis 17
            For j = 3 To 17
                If Not IsEmpty(wsZiel.Cells(12, j).Value) Then
                    ' Case-Insensitive speichern: Alles in Großbuchstaben
                    dictHeaders(UCase(CStr(wsZiel.Cells(12, j).Value))) = j
                End If
            Next j
            
            ' Zielzeile für Vorgangsnummer finden oder erstellen
            lZielzeile = FindOrCreateTargetRow(wsZiel, rawVorgang)
            
            ' Neuer Eintrag?
            If wsZiel.Cells(lZielzeile, 1).Value = "" Then
                ' Vorgangsnummer in Spalte A
                wsZiel.Cells(lZielzeile, 1).Value = rawVorgang
                ' Wert aus Rohdaten Spalte C in Spalte B
                wsZiel.Cells(lZielzeile, 2).Value = wsData.Cells(i, 3).Value
            End If
            
            ' Header suchen (Case-Insensitive)
            Dim upperHeader As String
            upperHeader = UCase(rawHeader)
            
            If dictHeaders.Exists(upperHeader) Then
                Dim zielSpalte As Long
                zielSpalte = dictHeaders(upperHeader)
                ' Wert aus Rohdaten Spalte L (Spalte 12)
                rawValue = wsData.Cells(i, 12).Value
                wsZiel.Cells(lZielzeile, zielSpalte).Value = rawValue
            Else
                ' Kein passender Header gefunden, nichts eintragen
            End If
            
        End If
NächsterDatensatz:
        Set wsZiel = Nothing
    Next i
    
    wbData.Close False
    MsgBox "Import abgeschlossen!"
End Sub

Function FindOrCreateTargetRow(ws As Worksheet, Vorgang As String) As Long
    Dim rngFound As Range
    Dim lCheckRow As Long
    
    Set rngFound = ws.Columns(1).Find(What:=Vorgang, LookAt:=xlWhole)
    If Not rngFound Is Nothing Then
        FindOrCreateTargetRow = rngFound.Row
        Exit Function
    End If
    
    lCheckRow = 16
    Do While ws.Cells(lCheckRow, 1).Value <> ""
        lCheckRow = lCheckRow + 30
    Loop
    FindOrCreateTargetRow = lCheckRow
End Function
