Option Explicit

Sub ImportiereRohdatenFinal()
    Dim wbDash As Workbook
    Dim wbData As Workbook
    Dim wsZuweisung As Worksheet
    Dim wsZiel As Worksheet
    Dim wsData As Worksheet
    Dim rngFound As Range
    
    Dim lLetzteZeileZuweisung As Long
    Dim lLetzteZeileData As Long
    
    Dim i As Long, j As Long
    
    Dim rawKey As String
    Dim rawVorgang As String
    Dim rawHeader As String
    Dim rawValue As Variant
    Dim strZielblattName As String
    Dim lZielzeile As Long
    
    Dim dictHeaders As Object
    
    Set wbDash = ThisWorkbook
    Set wsZuweisung = wbDash.Worksheets("Zuweisung")
    
    ' Rohdaten öffnen (Pfad anpassen)
    Set wbData = Workbooks.Open("C:\Pfad\zu\Leaptree_Data.xlsx")
    Set wsData = wbData.Worksheets(1)
    
    lLetzteZeileZuweisung = wsZuweisung.Cells(wsZuweisung.Rows.Count, 2).End(xlUp).Row ' letzte Zeile in Zuweisung Spalte B
    lLetzteZeileData = wsData.Cells(wsData.Rows.Count, 1).End(xlUp).Row ' letzte Zeile Rohdaten Spalte A
    
    ' Dictionary für Headers erst erstellen, wenn wir wissen, welches Zielblatt wir beschreiben
    Set dictHeaders = CreateObject("Scripting.Dictionary")
    
    ' Durch alle Rohdaten
    For i = 2 To lLetzteZeileData
        rawKey = wsData.Cells(i, 1).Value      ' Rohdaten Spalte A - Schlüssel
        rawVorgang = wsData.Cells(i, 2).Value  ' Rohdaten Spalte B - Vorgangsnummer
        rawHeader = wsData.Cells(i, 10).Value  ' Rohdaten Spalte J - Headerbezeichnung
        
        ' Schlüssel in Zuweisung suchen
        Set rngFound = wsZuweisung.Columns(2).Find(What:=rawKey, LookAt:=xlWhole)
        If Not rngFound Is Nothing Then
            strZielblattName = rngFound.Offset(0, 1).Value ' Spalte C in Zuweisung gibt Zielblattname
            
            On Error Resume Next
            Set wsZiel = wbDash.Worksheets(strZielblattName)
            On Error GoTo 0
            
            If wsZiel Is Nothing Then
                ' Zielblatt nicht vorhanden, nächsten Datensatz bearbeiten
                GoTo NächsterDatensatz
            End If
            
            ' Headers einlesen, falls noch nicht geschehen
            If dictHeaders.Count = 0 Then
                Dim lastCol As Long
                lastCol = wsZiel.Cells(12, wsZiel.Columns.Count).End(xlToLeft).Column
                For j = 1 To lastCol
                    If Not dictHeaders.Exists(CStr(wsZiel.Cells(12, j).Value)) Then
                        dictHeaders(CStr(wsZiel.Cells(12, j).Value)) = j
                    End If
                Next j
            End If
            
            ' Zielzeile für Vorgangsnummer finden oder erstellen
            lZielzeile = FindOrCreateTargetRow(wsZiel, rawVorgang)
            
            ' Wenn neu angelegt, dann Vorgangsnummer und Basiswert eintragen
            If wsZiel.Cells(lZielzeile, 1).Value = "" Then
                ' Neuer Eintrag
                wsZiel.Cells(lZielzeile, 1).Value = rawVorgang
                wsZiel.Cells(lZielzeile, 2).Value = wsData.Cells(i, 3).Value ' Wert aus Rohdaten Spalte C
            End If
            
            ' Nun den Wert für den angegebenen Header aus den Rohdaten holen
            ' Wir nehmen an, dass der eigentliche Datenwert ebenfalls aus Spalte C kommt,
            ' oder nutzen eine Hilfsfunktion, wenn nötig.
            rawValue = BestimmeRohwert(wsData, i, rawHeader)
            
            ' Header im Ziel suchen
            If dictHeaders.Exists(rawHeader) Then
                Dim zielSpalte As Long
                zielSpalte = dictHeaders(rawHeader)
                wsZiel.Cells(lZielzeile, zielSpalte).Value = rawValue
            Else
                ' Falls kein Header gefunden wurde, ggf. ignorieren oder melden
            End If
            
        End If
NächsterDatensatz:
        Set wsZiel = Nothing
    Next i
    
    wbData.Close False
    MsgBox "Import abgeschlossen!"
End Sub

Function FindOrCreateTargetRow(ws As Worksheet, Vorgang As String) As Long
    ' Sucht Vorgangsnummer in Spalte A
    ' Falls vorhanden, gibt Zeile zurück
    ' Falls nicht, sucht freien Platz: Start bei 16, wenn belegt -> +30 (46), wenn belegt -> +30 usw.
    
    Dim rngFound As Range
    Dim lCheckRow As Long
    
    Set rngFound = ws.Columns(1).Find(What:=Vorgang, LookAt:=xlWhole)
    If Not rngFound Is Nothing Then
        FindOrCreateTargetRow = rngFound.Row
        Exit Function
    End If
    
    ' Nicht gefunden, neuen Platz suchen
    lCheckRow = 16
    Do While ws.Cells(lCheckRow, 1).Value <> ""
        lCheckRow = lCheckRow + 30
    Loop
    FindOrCreateTargetRow = lCheckRow
End Function

Function BestimmeRohwert(ws As Worksheet, ByVal zeile As Long, ByVal hdr As String) As Variant
    ' Hier können Sie je nach Header entscheiden, aus welcher Spalte der Rohdaten der Wert stammt.
    ' Als Standardbeispiel nehmen wir einfach immer Spalte C aus den Rohdaten.
    ' Passen Sie diese Funktion nach Bedarf an.
    BestimmeRohwert = ws.Cells(zeile, 3).Value
End Function
