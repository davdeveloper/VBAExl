Option Explicit

Sub ImportiereRohdatenFinal()
    Dim wbDash As Workbook
    Dim wbData As Workbook
    Dim wsZuweisung As Worksheet
    Dim wsZiel As Worksheet
    Dim wsData As Worksheet
    Dim rngFound As Range
    
    Dim lLetzteZeileZuweisung As Long
    Dim lLetzteZeileData As Long
    
    Dim i As Long, j As Long
    
    Dim rawKey As String
    Dim rawVorgang As String
    Dim rawHeader As String
    Dim rawValue As Variant
    Dim strZielblattName As String
    Dim lZielzeile As Long
    
    Dim dictHeaders As Object
    Dim dictStartZeilen As Object ' Merkt sich pro Blatt die Startzeile
    Dim upperHeader As String
    Dim zielSpalte As Long
    
    Set wbDash = ThisWorkbook
    Set wsZuweisung = wbDash.Worksheets("Zuweisung")
    
    ' Rohdaten öffnen (Pfad anpassen!)
    Set wbData = Workbooks.Open("C:\Pfad\zu\Leaptree_Data.xlsx")
    Set wsData = wbData.Worksheets(1)
    
    lLetzteZeileZuweisung = wsZuweisung.Cells(wsZuweisung.Rows.Count, 2).End(xlUp).Row
    lLetzteZeileData = wsData.Cells(wsData.Rows.Count, 1).End(xlUp).Row
    
    Set dictHeaders = CreateObject("Scripting.Dictionary")
    Set dictStartZeilen = CreateObject("Scripting.Dictionary")
    
    For i = 2 To lLetzteZeileData
        rawKey = wsData.Cells(i, 1).Value      ' Rohdaten Spalte A
        rawVorgang = wsData.Cells(i, 2).Value  ' Rohdaten Spalte B
        rawHeader = wsData.Cells(i, 10).Value  ' Rohdaten Spalte J (Headername)
        
        ' Schlüssel in Zuweisung suchen
        Set rngFound = wsZuweisung.Columns(2).Find(What:=rawKey, LookAt:=xlWhole)
        If Not rngFound Is Nothing Then
            strZielblattName = rngFound.Offset(0, 1).Value ' Zielblatt aus Spalte C in Zuweisung
            
            On Error Resume Next
            Set wsZiel = wbDash.Worksheets(strZielblattName)
            On Error GoTo 0
            
            If wsZiel Is Nothing Then
                ' Zielblatt nicht gefunden
                GoTo NächsterDatensatz
            End If
            
            ' Headers des Zielblatts einlesen
            dictHeaders.RemoveAll
            For j = 3 To 17 ' C bis Q
                If Not IsEmpty(wsZiel.Cells(12, j)) Then
                    dictHeaders(UCase(CStr(wsZiel.Cells(12, j).Value))) = j
                End If
            Next j
            
            ' Einmalig pro Blatt Startzeile bestimmen
            Dim startZeile As Long
            If Not dictStartZeilen.Exists(strZielblattName) Then
                ' Startzeile einmalig ermitteln
                startZeile = FindeFreieStartzeile(wsZiel)
                dictStartZeilen(strZielblattName) = startZeile
            Else
                startZeile = dictStartZeilen(strZielblattName)
            End If
            
            ' Vorgangszeile suchen
            Set rngFound = wsZiel.Columns(1).Find(What:=rawVorgang, LookAt:=xlWhole)
            If rngFound Is Nothing Then
                ' Vorgang noch nicht vorhanden, also neuen Eintrag in der aktuellen startZeile
                lZielzeile = startZeile
                ' Vorgangsnummer in Spalte A
                wsZiel.Cells(lZielzeile, 1).Value = rawVorgang
                ' Wert aus Rohdaten Spalte C in Spalte B
                wsZiel.Cells(lZielzeile, 2).Value = wsData.Cells(i, 3).Value
                ' Startzeile um 1 erhöhen für den nächsten neuen Vorgang
                dictStartZeilen(strZielblattName) = startZeile + 1
            Else
                ' Vorgangsnummer existiert schon
                lZielzeile = rngFound.Row
            End If
            
            ' Header suchen
            upperHeader = UCase(rawHeader)
            If dictHeaders.Exists(upperHeader) Then
                zielSpalte = dictHeaders(upperHeader)
                ' Wert aus Rohdaten Spalte L
                rawValue = wsData.Cells(i, 12).Value
                
                ' Werte konvertieren
                Select Case UCase(CStr(rawValue))
                    Case "JA"
                        rawValue = "j"
                    Case "NEIN"
                        rawValue = "n"
                    Case "N/A"
                        rawValue = ""   ' Leer lassen
                    Case "TEILWEISE"
                        rawValue = "t"
                End Select
                
                wsZiel.Cells(lZielzeile, zielSpalte).Value = rawValue
            End If
            
        End If
NächsterDatensatz:
        Set wsZiel = Nothing
    Next i
    
    wbData.Close False
    MsgBox "Import abgeschlossen!"
End Sub

Function FindeFreieStartzeile(ws As Worksheet) As Long
    ' Prüft einmalig beim ersten Hinzufügen:
    ' Start bei Zeile 16, wenn belegt -> +30, wieder belegt -> +30, bis frei
    Dim lCheckRow As Long
    lCheckRow = 16
    Do While ws.Cells(lCheckRow, 1).Value <> ""
        lCheckRow = lCheckRow + 30
    Loop
    FindeFreieStartzeile = lCheckRow
End Function
