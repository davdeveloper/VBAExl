Option Explicit

Sub ImportiereRohdatenFinal()
    Dim wbDash As Workbook
    Dim wbData As Workbook
    Dim wsZuweisung As Worksheet
    Dim wsZiel As Worksheet
    Dim wsData As Worksheet
    Dim rngFound As Range
    
    Dim lLetzteZeileZuweisung As Long
    Dim lLetzteZeileData As Long
    
    Dim i As Long, j As Long
    
    Dim rawKey As String
    Dim rawVorgang As String
    Dim rawHeader As String
    Dim rawValue As Variant
    Dim strZielblattName As String
    Dim lZielzeile As Long
    
    Dim dictHeaders As Object
    
    Set wbDash = ThisWorkbook
    Set wsZuweisung = wbDash.Worksheets("Zuweisung")
    
    ' Rohdaten öffnen (Pfad anpassen!)
    Set wbData = Workbooks.Open("C:\Pfad\zu\Leaptree_Data.xlsx")
    Set wsData = wbData.Worksheets(1)
    
    lLetzteZeileZuweisung = wsZuweisung.Cells(wsZuweisung.Rows.Count, 2).End(xlUp).Row ' Letzte Zeile in Zuweisung Spalte B
    lLetzteZeileData = wsData.Cells(wsData.Rows.Count, 1).End(xlUp).Row ' Letzte Zeile Rohdaten Spalte A
    
    ' Dictionary für Headers wird beim ersten Setzen des Zielblattes gefüllt
    Set dictHeaders = CreateObject("Scripting.Dictionary")
    
    For i = 2 To lLetzteZeileData
        rawKey = wsData.Cells(i, 1).Value      ' Rohdaten Spalte A - Schlüssel
        rawVorgang = wsData.Cells(i, 2).Value  ' Rohdaten Spalte B - Vorgangsnummer
        rawHeader = wsData.Cells(i, 10).Value  ' Rohdaten Spalte J - Headerbezeichnung
        
        ' Schlüssel in Zuweisung suchen
        Set rngFound = wsZuweisung.Columns(2).Find(What:=rawKey, LookAt:=xlWhole)
        If Not rngFound Is Nothing Then
            strZielblattName = rngFound.Offset(0, 1).Value ' Spalte C in Zuweisung -> Zielblattname
            
            On Error Resume Next
            Set wsZiel = wbDash.Worksheets(strZielblattName)
            On Error GoTo 0
            
            If wsZiel Is Nothing Then
                ' Zielblatt nicht vorhanden
                GoTo NächsterDatensatz
            End If
            
            ' Headers des Zielblatts einlesen, falls noch nicht geschehen
            If dictHeaders.Count = 0 Then
                Dim lastCol As Long
                lastCol = wsZiel.Cells(12, wsZiel.Columns.Count).End(xlToLeft).Column
                For j = 1 To lastCol
                    If Not dictHeaders.Exists(CStr(wsZiel.Cells(12, j).Value)) Then
                        dictHeaders(CStr(wsZiel.Cells(12, j).Value)) = j
                    End If
                Next j
            End If
            
            ' Zielzeile für Vorgangsnummer finden oder erstellen
            lZielzeile = FindOrCreateTargetRow(wsZiel, rawVorgang)
            
            ' Neuer Eintrag?
            If wsZiel.Cells(lZielzeile, 1).Value = "" Then
                ' Vorgangsnummer
                wsZiel.Cells(lZielzeile, 1).Value = rawVorgang
                ' Wert aus Rohdaten Spalte C in Spalte B des Zielblatts
                wsZiel.Cells(lZielzeile, 2).Value = wsData.Cells(i, 3).Value
            End If
            
            ' Weitere Spalten basierend auf Header in J füllen
            If dictHeaders.Exists(rawHeader) Then
                Dim zielSpalte As Long
                zielSpalte = dictHeaders(rawHeader)
                ' Wert bestimmen, hier aus Spalte K der Rohdaten (Annahme)
                rawValue = BestimmeRohwert(wsData, i, rawHeader)
                wsZiel.Cells(lZielzeile, zielSpalte).Value = rawValue
            End If
            
        End If
NächsterDatensatz:
        Set wsZiel = Nothing
    Next i
    
    wbData.Close False
    MsgBox "Import abgeschlossen!"
End Sub

Function FindOrCreateTargetRow(ws As Worksheet, Vorgang As String) As Long
    ' Sucht Vorgangsnummer in Spalte A
    ' Falls vorhanden, gibt Zeile zurück
    ' Falls nicht, neuen Platz: Start bei Zeile 16, wenn belegt -> +30
    
    Dim rngFound As Range
    Dim lCheckRow As Long
    
    Set rngFound = ws.Columns(1).Find(What:=Vorgang, LookAt:=xlWhole)
    If Not rngFound Is Nothing Then
        FindOrCreateTargetRow = rngFound.Row
        Exit Function
    End If
    
    lCheckRow = 16
    Do While ws.Cells(lCheckRow, 1).Value <> ""
        lCheckRow = lCheckRow + 30
    Loop
    FindOrCreateTargetRow = lCheckRow
End Function

Function BestimmeRohwert(ws As Worksheet, ByVal zeile As Long, ByVal hdr As String) As Variant
    ' Hier legen Sie fest, aus welcher Spalte der Rohdaten der Wert stammt.
    ' Aktuell: Wert aus Spalte K (Spalte 11), da RohHeader in J (Spalte 10) steht.
    ' Passen Sie diesen Bereich an Ihre tatsächliche Datenstruktur an.
    BestimmeRohwert = ws.Cells(zeile, 11).Value
End Function
